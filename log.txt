---------------------
NoModRef: INF  
Ref: 
Mod: 
ModRef: y_0  w  h  x_0  x_1  y_1  
---------------------
<================= EliminateRedundantLS =====================>

------------------ In Function search-----------------
In Block : 0
In Block : 2
In Block : 7
In Block : 11
    load %r26 from %r25
In Block : 15
    load %r30 from @x_1
In Block : 18
    load %r33 from @y_1
In Block : 21
    load %r40 from %r39
    load %r46 from %r45
In Block : 23
    load %r52 from @x_1
In Block : 26
    load %r55 from @y_1
In Block : 29
In Block : 32
In Block : 35
In Block : 38
    load %r79 from @w
In Block : 39
In Block : 40
    load %r69 from @h
In Block : 41
In Block : 43
    store 0 to %r90
    load %r97 from %r96
    load %r103 from %r102
    call func: search ; deal with global: %r96
        Donnot need loading 
    call func: search ; deal with global: %r102
        Donnot need loading 
    call func: search ; deal with global: %r90
        Donnot need loading 
In Block : 44
In Block : 47
In Block : 48
    store 1 to %r118
In Block : 50
In Block : 54
In Block : 55
------------------ In Function main-----------------
In Block : 0
In Block : 1
    store %r0 to @w
    call func: getint ; deal with global: @w
        Donnot need loading 
    store %r1 to @h
In Block : 2
    load %r2 from @w
In Block : 6
In Block : 10
In Block : 13
    store 1 to %r22
In Block : 14
In Block : 16
    load %r32 from @h
In Block : 20
    load %r36 from @w
In Block : 23
    store %r38 to %r41
In Block : 24
    load %r46 from %r45
In Block : 27
    store %r87 to @x_0
    store %r82 to @y_0
In Block : 29
    load %r54 from %r53
In Block : 32
    store %r87 to @x_1
    store %r82 to @y_1
In Block : 34
In Block : 35
In Block : 36
    load %r66 from @x_0
    load %r67 from @y_0
    call func: search ; deal with global: @y_0
        Donnot need loading 
    call func: search ; deal with global: @x_0
        Donnot need loading 
In Block : 37
In Block : 40
In Block : 41
In Block : 42
    store %r78 to @w
    call func: getint ; deal with global: @w
        Donnot need loading 
    store %r79 to @h
In Block : 43
<=================    Gather Infomation =====================>

<================= OneDefDomAllUses =====================>

 ------------- In Function search------------
@x_1 is only used !
@y_1 is only used !
@w is only used !
@h is only used !
<=================    Gather Infomation =====================>

<================= OneDefDomAllUses =====================>

 ------------- In Function main------------
 def @y_1 by STORE inst
global val @@y_1 has initval ? 0
 def @x_1 by STORE inst
global val @@x_1 has initval ? 0
 def @y_0 by STORE inst
global val @@y_0 has initval ? 0
 def @x_0 by STORE inst
global val @@x_0 has initval ? 0
ScalarEvolution Analysis for function search
Loop at depth 1 with header 7:
  @a => Type: Unknown  Expr: @a (I) simplifiedExpr: @a (I)
  @step => Type: Unknown  Expr: @step (I) simplifiedExpr: @step (I)
  %r16 => Type: Unknown  Expr: %r16 (U) simplifiedExpr: %r16 (U)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r25 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r131 (U) * (1 * 30))) + (%r129 (U) * 1))) simplifiedExpr: (@a (I) + (%r131 (U) * 30) + %r129 (U))
  %r26 => Type: Unknown  Expr: %r26 (U) simplifiedExpr: %r26 (U)
  %r28 => Type: Unknown  Expr: %r28 (U) simplifiedExpr: %r28 (U)
  %r30 => Type: Unknown  Expr: %r30 (I) simplifiedExpr: %r30 (I)
  %r31 => Type: Unknown  Expr: %r31 (U) simplifiedExpr: %r31 (U)
  %r33 => Type: Unknown  Expr: %r33 (I) simplifiedExpr: %r33 (I)
  %r34 => Type: Unknown  Expr: %r34 (U) simplifiedExpr: %r34 (U)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r39 => Type: AddExpr  Expr: (@step (I) + (0 + (%r135 (U) * (1 * 2)))) simplifiedExpr: (@step (I) + (%r135 (U) * 2))
  %r41 => Type: AddExpr  Expr: (%r131 (U) + %r40 (U)) simplifiedExpr: (%r131 (U) + %r40 (U))
  %r40 => Type: Unknown  Expr: %r40 (U) simplifiedExpr: %r40 (U)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r45 => Type: AddExpr  Expr: (@step (I) + ((0 + (%r135 (U) * (1 * 2))) + (1 * 1))) simplifiedExpr: (@step (I) + (%r135 (U) * 2) + 1)
  %r47 => Type: AddExpr  Expr: (%r129 (U) + %r46 (U)) simplifiedExpr: (%r129 (U) + %r46 (U))
  %r46 => Type: Unknown  Expr: %r46 (U) simplifiedExpr: %r46 (U)
  %r50 => Type: AddExpr  Expr: (%r133 (U) + 1) simplifiedExpr: (%r133 (U) + 1)
  %r52 => Type: Unknown  Expr: %r52 (I) simplifiedExpr: %r52 (I)
  %r53 => Type: Unknown  Expr: %r53 (U) simplifiedExpr: %r53 (U)
  %r55 => Type: Unknown  Expr: %r55 (I) simplifiedExpr: %r55 (I)
  %r56 => Type: Unknown  Expr: %r56 (U) simplifiedExpr: %r56 (U)
  %r61 => Type: Unknown  Expr: %r61 (U) simplifiedExpr: %r61 (U)
  %r64 => Type: AddExpr  Expr: (%r135 (U) + 1) simplifiedExpr: (%r135 (U) + 1)
  %r67 => Type: Unknown  Expr: %r67 (U) simplifiedExpr: %r67 (U)
  %r69 => Type: Unknown  Expr: %r69 (I) simplifiedExpr: %r69 (I)
  %r71 => Type: Unknown  Expr: %r71 (I) simplifiedExpr: %r71 (I)
  %r72 => Type: Unknown  Expr: %r72 (U) simplifiedExpr: %r72 (U)
  %r76 => Type: Unknown  Expr: %r76 (U) simplifiedExpr: %r76 (U)
  %r79 => Type: Unknown  Expr: %r79 (I) simplifiedExpr: %r79 (I)
  %r81 => Type: Unknown  Expr: %r81 (I) simplifiedExpr: %r81 (I)
  %r82 => Type: Unknown  Expr: %r82 (U) simplifiedExpr: %r82 (U)
  %r86 => Type: AddExpr  Expr: (%r135 (U) + 1) simplifiedExpr: (%r135 (U) + 1)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r90 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r131 (U) * (1 * 30))) + (%r129 (U) * 1))) simplifiedExpr: (@a (I) + (%r131 (U) * 30) + %r129 (U))
  %r108 => Type: Unknown  Expr: %r108 (U) simplifiedExpr: %r108 (U)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r96 => Type: AddExpr  Expr: (@step (I) + (0 + (%r135 (U) * (1 * 2)))) simplifiedExpr: (@step (I) + (%r135 (U) * 2))
  %r98 => Type: AddExpr  Expr: (%r131 (U) + (%r97 (U) * -1)) simplifiedExpr: (%r131 (U) + (%r97 (U) * -1))
  %r97 => Type: Unknown  Expr: %r97 (U) simplifiedExpr: %r97 (U)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r102 => Type: AddExpr  Expr: (@step (I) + ((0 + (%r135 (U) * (1 * 2))) + (1 * 1))) simplifiedExpr: (@step (I) + (%r135 (U) * 2) + 1)
  %r104 => Type: AddExpr  Expr: (%r129 (U) + (%r103 (U) * -1)) simplifiedExpr: (%r129 (U) + (%r103 (U) * -1))
  %r103 => Type: Unknown  Expr: %r103 (U) simplifiedExpr: %r103 (U)
  %r107 => Type: Unknown  Expr: %r107 (I) simplifiedExpr: %r107 (I)
  %r110 => Type: AddExpr  Expr: (%r108 (U) + 1) simplifiedExpr: (%r108 (U) + 1)
  %r113 => Type: Unknown  Expr: %r113 (U) simplifiedExpr: %r113 (U)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r118 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r131 (U) * (1 * 30))) + (%r129 (U) * 1))) simplifiedExpr: (@a (I) + (%r131 (U) * 30) + %r129 (U))
  %r122 => Type: AddExpr  Expr: (%r135 (U) + 1) simplifiedExpr: (%r135 (U) + 1)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  %r131 => Type: Unknown  Expr: %r131 (U) simplifiedExpr: %r131 (U)
  %r129 => Type: Unknown  Expr: %r129 (U) simplifiedExpr: %r129 (U)
  %r133 => Type: Unknown  Expr: %r133 (U) simplifiedExpr: %r133 (U)
  %r135 => Type: Unknown  Expr: %r135 (U) simplifiedExpr: %r135 (U)
  %r136 => Type: Unknown  Expr: %r136 (U) simplifiedExpr: %r136 (U)
  %r137 => Type: Unknown  Expr: %r137 (U) simplifiedExpr: %r137 (U)
  %r149 => Type: Unknown  Expr: %r149 (U) simplifiedExpr: %r149 (U)
  %r150 => Type: Unknown  Expr: %r150 (U) simplifiedExpr: %r150 (U)
Loop at depth 2 with header 11:
  @a => Type: Unknown  Expr: @a (I) simplifiedExpr: @a (I)
  %r0 => Type: Unknown  Expr: %r0 (I) simplifiedExpr: %r0 (I)
  %r1 => Type: Unknown  Expr: %r1 (I) simplifiedExpr: %r1 (I)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  %r25 => Type: AddExpr  Expr: (@a (I) + ((0 + ({%r0 (I),+,%r40 (I)} * (1 * 30))) + ({%r1 (I),+,%r46 (I)} * 1))) simplifiedExpr: (@a (I) + {((%r0 (I) * 30) + %r1 (I)),+,((%r40 (I) * 30) + %r46 (I))})
  %r26 => Type: Unknown  Expr: %r26 (U) simplifiedExpr: %r26 (U)
  %r28 => Type: Unknown  Expr: %r28 (U) simplifiedExpr: %r28 (U)
  %r30 => Type: Unknown  Expr: %r30 (I) simplifiedExpr: %r30 (I)
  %r31 => Type: Unknown  Expr: %r31 (U) simplifiedExpr: %r31 (U)
  %r33 => Type: Unknown  Expr: %r33 (I) simplifiedExpr: %r33 (I)
  %r34 => Type: Unknown  Expr: %r34 (U) simplifiedExpr: %r34 (U)
  %r39 => Type: Unknown  Expr: %r39 (I) simplifiedExpr: %r39 (I)
  %r41 => Type: AddExpr  Expr: ({%r0 (I),+,%r40 (I)} + %r40 (I)) simplifiedExpr: ({%r0 (I),+,%r40 (I)} + %r40 (I))
  %r40 => Type: Unknown  Expr: %r40 (I) simplifiedExpr: %r40 (I)
  %r45 => Type: Unknown  Expr: %r45 (I) simplifiedExpr: %r45 (I)
  %r47 => Type: AddExpr  Expr: ({%r1 (I),+,%r46 (I)} + %r46 (I)) simplifiedExpr: ({%r1 (I),+,%r46 (I)} + %r46 (I))
  %r46 => Type: Unknown  Expr: %r46 (I) simplifiedExpr: %r46 (I)
  %r50 => Type: AddExpr  Expr: ({0,+,1} + 1) simplifiedExpr: {1,+,1}
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  %r131 => Type: AddRecExpr  Expr: {%r0 (I),+,%r40 (I)} simplifiedExpr: {%r0 (I),+,%r40 (I)}
  %r129 => Type: AddRecExpr  Expr: {%r1 (I),+,%r46 (I)} simplifiedExpr: {%r1 (I),+,%r46 (I)}
  %r133 => Type: AddRecExpr  Expr: {0,+,1} simplifiedExpr: {0,+,1}
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
ScalarEvolution Analysis for function main
Loop at depth 2 with header 20:
  @a => Type: Unknown  Expr: @a (I) simplifiedExpr: @a (I)
  %r38 => Type: Unknown  Expr: %r38 (I) simplifiedExpr: %r38 (I)
  %r37 => Type: Unknown  Expr: %r37 (U) simplifiedExpr: %r37 (U)
  %r41 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r87 (I) * (1 * 30))) + ({1,+,1} * 1))) simplifiedExpr: (@a (I) + (%r87 (I) * 30) + {1,+,1})
  %r45 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r87 (I) * (1 * 30))) + ({1,+,1} * 1))) simplifiedExpr: (@a (I) + (%r87 (I) * 30) + {1,+,1})
  %r46 => Type: Unknown  Expr: %r46 (U) simplifiedExpr: %r46 (U)
  %r48 => Type: Unknown  Expr: %r48 (U) simplifiedExpr: %r48 (U)
  %r53 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r87 (I) * (1 * 30))) + ({1,+,1} * 1))) simplifiedExpr: (@a (I) + (%r87 (I) * 30) + {1,+,1})
  %r54 => Type: Unknown  Expr: %r54 (U) simplifiedExpr: %r54 (U)
  %r56 => Type: Unknown  Expr: %r56 (U) simplifiedExpr: %r56 (U)
  %r61 => Type: AddExpr  Expr: ({1,+,1} + 1) simplifiedExpr: {2,+,1}
  %r82 => Type: AddRecExpr  Expr: {1,+,1} simplifiedExpr: {1,+,1}
  %r87 => Type: Unknown  Expr: %r87 (I) simplifiedExpr: %r87 (I)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
Loop at depth 1 with header 2:
  @a => Type: Unknown  Expr: @a (I) simplifiedExpr: @a (I)
  %r2 => Type: Unknown  Expr: %r2 (I) simplifiedExpr: %r2 (I)
  %r4 => Type: Unknown  Expr: %r4 (I) simplifiedExpr: %r4 (I)
  %r14 => Type: Unknown  Expr: %r14 (U) simplifiedExpr: %r14 (U)
  %r18 => Type: Unknown  Expr: %r18 (U) simplifiedExpr: %r18 (U)
  %r22 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r89 (U) * (1 * 30))) + (%r85 (U) * 1))) simplifiedExpr: (@a (I) + (%r89 (U) * 30) + %r85 (U))
  %r26 => Type: AddExpr  Expr: (%r85 (U) + 1) simplifiedExpr: (%r85 (U) + 1)
  %r29 => Type: AddExpr  Expr: (%r89 (U) + 1) simplifiedExpr: (%r89 (U) + 1)
  %r32 => Type: Unknown  Expr: %r32 (I) simplifiedExpr: %r32 (I)
  %r33 => Type: Unknown  Expr: %r33 (U) simplifiedExpr: %r33 (U)
  %r36 => Type: Unknown  Expr: %r36 (I) simplifiedExpr: %r36 (I)
  %r38 => Type: Unknown  Expr: %r38 (I) simplifiedExpr: %r38 (I)
  %r37 => Type: Unknown  Expr: %r37 (U) simplifiedExpr: %r37 (U)
  %r41 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r87 (U) * (1 * 30))) + (%r82 (U) * 1))) simplifiedExpr: (@a (I) + (%r87 (U) * 30) + %r82 (U))
  %r45 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r87 (U) * (1 * 30))) + (%r82 (U) * 1))) simplifiedExpr: (@a (I) + (%r87 (U) * 30) + %r82 (U))
  %r46 => Type: Unknown  Expr: %r46 (U) simplifiedExpr: %r46 (U)
  %r48 => Type: Unknown  Expr: %r48 (U) simplifiedExpr: %r48 (U)
  %r53 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r87 (U) * (1 * 30))) + (%r82 (U) * 1))) simplifiedExpr: (@a (I) + (%r87 (U) * 30) + %r82 (U))
  %r54 => Type: Unknown  Expr: %r54 (U) simplifiedExpr: %r54 (U)
  %r56 => Type: Unknown  Expr: %r56 (U) simplifiedExpr: %r56 (U)
  %r61 => Type: AddExpr  Expr: (%r82 (U) + 1) simplifiedExpr: (%r82 (U) + 1)
  %r64 => Type: AddExpr  Expr: (%r87 (U) + 1) simplifiedExpr: (%r87 (U) + 1)
  %r66 => Type: Unknown  Expr: %r66 (I) simplifiedExpr: %r66 (I)
  %r67 => Type: Unknown  Expr: %r67 (I) simplifiedExpr: %r67 (I)
  %r69 => Type: Unknown  Expr: %r69 (U) simplifiedExpr: %r69 (U)
  %r72 => Type: Unknown  Expr: %r72 (U) simplifiedExpr: %r72 (U)
  %r78 => Type: Unknown  Expr: %r78 (I) simplifiedExpr: %r78 (I)
  %r79 => Type: Unknown  Expr: %r79 (I) simplifiedExpr: %r79 (I)
  %r82 => Type: Unknown  Expr: %r82 (U) simplifiedExpr: %r82 (U)
  %r85 => Type: Unknown  Expr: %r85 (U) simplifiedExpr: %r85 (U)
  %r87 => Type: Unknown  Expr: %r87 (U) simplifiedExpr: %r87 (U)
  %r89 => Type: Unknown  Expr: %r89 (U) simplifiedExpr: %r89 (U)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
Loop at depth 2 with header 6:
  @a => Type: Unknown  Expr: @a (I) simplifiedExpr: @a (I)
  %r14 => Type: Unknown  Expr: %r14 (U) simplifiedExpr: %r14 (U)
  %r18 => Type: Unknown  Expr: %r18 (U) simplifiedExpr: %r18 (U)
  %r22 => Type: AddExpr  Expr: (@a (I) + ((0 + ({0,+,1} * (1 * 30))) + (%r85 (U) * 1))) simplifiedExpr: (@a (I) + {0,+,30} + %r85 (U))
  %r26 => Type: AddExpr  Expr: (%r85 (U) + 1) simplifiedExpr: (%r85 (U) + 1)
  %r29 => Type: AddExpr  Expr: ({0,+,1} + 1) simplifiedExpr: {1,+,1}
  %r85 => Type: Unknown  Expr: %r85 (U) simplifiedExpr: %r85 (U)
  %r89 => Type: AddRecExpr  Expr: {0,+,1} simplifiedExpr: {0,+,1}
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
Loop at depth 2 with header 10:
  @a => Type: Unknown  Expr: @a (I) simplifiedExpr: @a (I)
  %r18 => Type: Unknown  Expr: %r18 (U) simplifiedExpr: %r18 (U)
  %r22 => Type: AddExpr  Expr: (@a (I) + ((0 + (%r89 (I) * (1 * 30))) + ({0,+,1} * 1))) simplifiedExpr: (@a (I) + (%r89 (I) * 30) + {0,+,1})
  %r26 => Type: AddExpr  Expr: ({0,+,1} + 1) simplifiedExpr: {1,+,1}
  %r85 => Type: AddRecExpr  Expr: {0,+,1} simplifiedExpr: {0,+,1}
  %r89 => Type: Unknown  Expr: %r89 (I) simplifiedExpr: %r89 (I)
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
Loop at depth 2 with header 16:
  @a => Type: Unknown  Expr: @a (I) simplifiedExpr: @a (I)
  %r33 => Type: Unknown  Expr: %r33 (U) simplifiedExpr: %r33 (U)
  %r38 => Type: Unknown  Expr: %r38 (I) simplifiedExpr: %r38 (I)
  %r37 => Type: Unknown  Expr: %r37 (U) simplifiedExpr: %r37 (U)
  %r41 => Type: AddExpr  Expr: (@a (I) + ((0 + ({1,+,1} * (1 * 30))) + (%r82 (U) * 1))) simplifiedExpr: (@a (I) + {30,+,30} + %r82 (U))
  %r45 => Type: AddExpr  Expr: (@a (I) + ((0 + ({1,+,1} * (1 * 30))) + (%r82 (U) * 1))) simplifiedExpr: (@a (I) + {30,+,30} + %r82 (U))
  %r46 => Type: Unknown  Expr: %r46 (U) simplifiedExpr: %r46 (U)
  %r48 => Type: Unknown  Expr: %r48 (U) simplifiedExpr: %r48 (U)
  %r53 => Type: AddExpr  Expr: (@a (I) + ((0 + ({1,+,1} * (1 * 30))) + (%r82 (U) * 1))) simplifiedExpr: (@a (I) + {30,+,30} + %r82 (U))
  %r54 => Type: Unknown  Expr: %r54 (U) simplifiedExpr: %r54 (U)
  %r56 => Type: Unknown  Expr: %r56 (U) simplifiedExpr: %r56 (U)
  %r61 => Type: AddExpr  Expr: (%r82 (U) + 1) simplifiedExpr: (%r82 (U) + 1)
  %r64 => Type: AddExpr  Expr: ({1,+,1} + 1) simplifiedExpr: {2,+,1}
  %r82 => Type: Unknown  Expr: %r82 (U) simplifiedExpr: %r82 (U)
  %r87 => Type: AddRecExpr  Expr: {1,+,1} simplifiedExpr: {1,+,1}
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  0 => Type: Constant  Expr: 0 simplifiedExpr: 0
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
  1 => Type: Constant  Expr: 1 simplifiedExpr: 1
